AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Lambda functions required for the AWS GitLab Quick Start (qs-1rpegts3l)

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W9002
        - W9003
        - W9004
        - E0002

Parameters:
  QSS3BucketName:
    Type: String
  QSS3KeyPrefix:
    Type: String

Mappings:
  Config:
    EksPrefix: { Value: 'eks-quickstart' }
    GitLabPrefix: { Value: 'gitlab-quickstart' }

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Resources:

  # Using lambda packages from EKS quickstart. 
  # NOTE: This creates a dependency on EKS QS implementaton.
  # Consider this safe as DeleteBucketContents lambda is generic enough.

  CrHelperLayer:
    DependsOn: CopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub ['${Prefix}-Crhelper', {Prefix: !FindInMap [Config, GitLabPrefix, Value]}]
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Sub ['${Prefix}-lambdazips-${AWS::Region}-${AWS::AccountId}', {Prefix: !FindInMap [Config, EksPrefix, Value]}]
        S3Key: !Sub '${QSS3KeyPrefix}submodules/quickstart-amazon-eks/functions/packages/crhelperLayer/lambda.zip'

  DeleteBucketContentsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ['${Prefix}-DeleteBucketContents', {Prefix: !FindInMap [Config, GitLabPrefix, Value]}]
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt DeleteBucketContentsRole.Arn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref CrHelperLayer]
      Code:
        S3Bucket: !Sub ['${Prefix}-lambdazips-${AWS::Region}-${AWS::AccountId}', {Prefix: !FindInMap [Config, EksPrefix, Value]}]
        S3Key: !Sub '${QSS3KeyPrefix}submodules/quickstart-amazon-eks/functions/packages/DeleteBucketContents/lambda.zip'

  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-CopyZips', {Prefix: !FindInMap [Config, EksPrefix, Value]}]
      DestBucket: !Sub ['${Prefix}-lambdazips-${AWS::Region}-${AWS::AccountId}', {Prefix: !FindInMap [Config, EksPrefix, Value]}]
      SourceBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/CfnSesDomain/lambda.zip
        - functions/packages/CleanupACMDNSValidation/lambda.zip
        - functions/packages/SmtpPasswordGenerator/lambda.zip
        - functions/packages/UpdateDnsRecord/lambda.zip

  RandomStringFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Timeout: 30
      Role: !GetAtt TrivialFunctionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import cfnresponse
          import string, random

          def random_string(length):
            return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length))

          def lambda_handler(event, context):
            rs = ''
            if event['RequestType'] == 'Create':
              length = int(event['ResourceProperties']['Length'])
              rs = random_string(length)
            else: # Delete / Update
              rs = event['PhysicalResourceId']

            cfnresponse.send(event, context, cfnresponse.SUCCESS, { 'Value': rs }, rs)

  TrivialFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeLambdaExecutionRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

Outputs:
  FunctionsBucketName:
    Value: !Sub ['${Prefix}-lambdazips-${AWS::Region}-${AWS::AccountId}', {Prefix: !FindInMap [Config, EksPrefix, Value]}]
  RandomStringFunctionArn:
    Value: !GetAtt RandomStringFunction.Arn
  DeleteBucketContentsFunctionArn:
    Value: !GetAtt DeleteBucketContentsFunction.Arn
  DeleteBucketContentsRoleName:
    Value: !Ref DeleteBucketContentsRole