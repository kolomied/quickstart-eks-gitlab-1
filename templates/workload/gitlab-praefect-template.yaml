AWSTemplateFormatVersion: 2010-09-09
Description: Deploys Praefect instances (qs-1rpegts5h)

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W4002
        - W9002
        - W9003
        - W9004
        - E0002

Parameters:
  # Infrastructure
  EnvironmentName:
    Type: String
  DomainName:
    Type: String

  # Database
  DBHost: 
    Type: String
  DBPort:
    Type: Number
  DBName: 
    Type: String
    AllowedPattern: "[a-zA-Z0-9]*"
    MaxLength: "64"
    MinLength: "0"
  DBMasterUsername:
    Type: String
  DBMasterUserPassword:
    Type: String
    NoEcho: "True"

  # Network
  VPCID: 
    Type: AWS::EC2::VPC::Id
  PraefectSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  PraefectSecurityGroup:
    Type: String

  # GitLab
  GitLabVersion:
    Type: String
  GitLabShellToken:
    Type: String
    NoEcho: "True"
  PraefectInternalToken:
    Type: String
    NoEcho: "True"
  PraefectExternalToken:
    Type: String
    NoEcho: "True"

  # Praefect
  PraefectAMIId:
    Type: AWS::EC2::Image::Id
  PraefectInstanceType:
    Type: String
  PraefectReplicasCount: 
    Type: Number
  PraefectPort:
    Type: Number
  GitalyPort:
    Type: Number

  # Storage
  RootDeviceName:
    Type: String
    Default: "/dev/xvda"
  RootVolumeSize:
    Type: Number
    Default: 100

  # Quickstart 
  FunctionsBucketName:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
  QSS3KeyPrefix:
    Type: String
    AllowedPattern: ^[0-9a-zA-Z-/]*$

Resources:

  PraefectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub praefect-${AWS::StackName}
      RetentionInDays: 30

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
                Resource: 
                - !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:*'

  PraefectLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref PraefectInstanceType
        ImageId: !Ref PraefectAMIId
        SecurityGroupIds: 
          - !Ref PraefectSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        BlockDeviceMappings: 
          - DeviceName: !Ref RootDeviceName
            Ebs:
              VolumeSize: !Ref RootVolumeSize
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource "PraefectAutoScalingGroup" --region ${AWS::Region} --configsets install_all
          
            # retry reconfigure in case of failure - observed some race conditions during Postgres db updates.
            for i in $(seq 1 3); do gitlab-ctl reconfigure && s=0 && break || s=$? && sleep 15; done; (exit $s)
            
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource "PraefectAutoScalingGroup" --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: gitlab-praefect

  PraefectAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata: 
      AWS::CloudFormation::Init:
        configSets:
          install_all:
          - 01_setup_cloud_watch_logs
          - 02_prereqs
          - 03_install_praefect

        01_setup_cloud_watch_logs:
          files:

            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${PraefectLogGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${PraefectLogGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/gitlab/praefect/current]
                file = /var/log/gitlab/praefect/current
                log_group_name = ${PraefectLogGroup}
                log_stream_name = {instance_id}/praefect-current
                datetime_format = %Y-%m-%d %H:%M:%S

                [/var/log/gitlab/praefect/praefect-sql-migrate.log]
                file = /var/log/gitlab/praefect/praefect-sql-migrate-*.log
                log_group_name = ${PraefectLogGroup}
                log_stream_name = {instance_id}/praefect-sql-migrate-log
                datetime_format = %Y-%m-%d %H:%M:%S
                
                [/var/log/gitlab/alertmanager/current ]
                file = /var/log/gitlab/alertmanager/current
                log_group_name = ${PraefectLogGroup}
                log_stream_name = {instance_id}/gitaly_hooks.log
                datetime_format = %Y-%m-%d %H:%M:%S

              mode: "000444"
              owner: root
              group: root

          commands:
            100_download_awslogs:
              command: wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              cwd: /root

            200_setup_etc_issue_file:
              command: sed -i '1 i\Amazon Linux AMI' /etc/issue

            300_install_awslogs:
              command: !Sub python awslogs-agent-setup.py -n -r ${AWS::Region} -c /etc/awslogs/awslogs.conf
              cwd: /root
        02_prereqs:
          packages:
            yum:
              python3: []
              python3-pip: []
              python2-pip: []

          commands:
            100_gitlab_yum_repo:
              command: curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | bash

            200_yum_update:
              command: yum update -y --exclude=gitlab-ee*
        03_install_praefect:
          packages:
            yum:
              gitlab-ee:
                - !Ref GitLabVersion

          files:
            /etc/gitlab/gitlab.rb:
              content: !Sub |
                praefect['enable'] = true
                postgresql['enable'] = false
                redis['enable'] = false
                nginx['enable'] = false
                prometheus['enable'] = false
                alertmanager['enable'] = false
                grafana['enable'] = false
                puma['enable'] = false
                sidekiq['enable'] = false
                gitlab_workhorse['enable'] = false
                gitaly['enable'] = false

                # Prevent database connections during 'gitlab-ctl reconfigure'
                gitlab_rails['rake_cache_clear'] = false
                gitlab_rails['auto_migrate'] = false

                praefect['listen_addr'] = '0.0.0.0:${PraefectPort}'
                praefect['auth_token'] = '${PraefectExternalToken}'
                gitlab_shell['secret_token'] = '${GitLabShellToken}'

                praefect['database_host'] = '${DBHost}'
                praefect['database_port'] = '${DBPort}'
                praefect['database_user'] = '${DBMasterUsername}'
                praefect['database_password'] = '${DBMasterUserPassword}'
                praefect['database_dbname'] = '${DBName}'
                praefect['database_sslmode'] = 'require'

                praefect['virtual_storages'] = {
                  'default' => {
                    'nodes' => {
                      'gitaly-0' => {
                        'address' => 'tcp://gitaly-0.${DomainName}:${GitalyPort}',
                        'token'   => '${PraefectInternalToken}'
                      },
                      'gitaly-1' => {
                        'address' => 'tcp://gitaly-1.${DomainName}:${GitalyPort}',
                        'token'   => '${PraefectInternalToken}'
                      },
                      'gitaly-2' => {
                        'address' => 'tcp://gitaly-2.${DomainName}:${GitalyPort}',
                        'token'   => '${PraefectInternalToken}'
                      }
                    }
                  }
                }

              mode: "000700"
              owner: root
              group: root

    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-praefect
      VPCZoneIdentifier: !Ref PraefectSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref PraefectLaunchTemplate
        Version: !GetAtt PraefectLaunchTemplate.LatestVersionNumber
      MinSize: !Ref PraefectReplicasCount
      MaxSize: !Ref PraefectReplicasCount
      TargetGroupARNs:
        - !Ref NetworkLoadBalancerTargetGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref PraefectReplicasCount
        Timeout: PT30M

  PraefectNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: !Ref PraefectSubnetIds
      Type: network

  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref PraefectPort
      Protocol: TCP
      VpcId: !Ref VPCID
      HealthCheckEnabled: true
      HealthCheckPort: !Ref PraefectPort
      HealthCheckProtocol: TCP
      HealthyThresholdCount: !Ref PraefectReplicasCount
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'

  PraefectNetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn: !Ref PraefectNLB
      Port: !Ref PraefectPort
      Protocol: TCP

Outputs:
  LoadBalancerDnsName:
    Value: !GetAtt PraefectNLB.DNSName